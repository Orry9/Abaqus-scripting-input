# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *

import sys, os 
from openpyxl import load_workbook
import string

# Setup logging
# sys.__stdout__
import logging
logger = logging.getLogger(__name__)
loggerHandler = logging.StreamHandler(sys.__stdout__)
loggerHandler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s:%(message)s'))
loggerHandler.setLevel(logging.DEBUG)
logger.addHandler(loggerHandler)
logger.setLevel(logging.DEBUG)

logger.info('Strong-axis-v2.py started')

# Get command argument (the job id)
jobNr = int(sys.argv[-1])

jobNumber = '{0:0>4}'.format(int(jobNr))
logger.info('jobNumber = {}'.format(jobNumber))

# Create JobDir
JobDir = 'Z:/Job-S-{}'.format(jobNumber)
os.mkdir(JobDir)
os.chdir(JobDir)
logger.info('Created directory {}'.format(JobDir))

inputExcelFile = 'C:\Users\Gebruiker\Desktop\Masterproef Orry/Scripting/Input strong-axis.xlsx'

logger.info('Reading exell file {} into abacus python'.format(inputExcelFile))
workbook = load_workbook(filename = inputExcelFile)
sheet = workbook["Flexural strong-axis"]


logger.info('Calculating jobRow for exell file from jobNr = {}'.format(jobNr))
# compute job row
if (jobNr <  469):
  jobRow = jobNr + 2



activeColumn = False
jobList = []
for columnName in list(string.ascii_uppercase):
  if (columnName == 'F'):
    activeColumn = True
  if (columnName == 'V'):
    activeColumn = False
  if (activeColumn == True):
    cellName = '{}{}'.format(columnName, jobRow)
    jobList.append(sheet[cellName].value)


logger.info('Reading exell data from jobRow = {}'.format(jobRow))
jobName, height, width, tf, tw, length, materialTypeRO, edgeSeed, globalSeed, weblinesInput, \
  residualStressWebInput, flangelinesInput, residualStressFlangeInput, forcedDisplacement, \
  eigenmodeNumber, imperfectionAmplitude = jobList


jobName = '{0:0>4}'.format(int(str(jobName).strip()))
height = float(str(height).strip())
width = float(str(width).strip())
tf = float(str(tf).strip())
tw = float(str(tw).strip())
length = float(str(length).strip())
edgeSeed = float(str(edgeSeed).strip())
globalSeed = float(str(globalSeed).strip())
materialTypeRO = str(materialTypeRO).strip()
weblinesInput = [float(i) for i in str(weblinesInput).strip().replace(',','.').split(';')]
residualStressWebInput = [float(i) for i in str(residualStressWebInput).strip().replace(',','.').split(';')]
flangelinesInput = [float(i) for i in str(flangelinesInput).strip().replace(',','.').split(';')]
residualStressFlangeInput = [float(i) for i in str(residualStressFlangeInput).strip().replace(',','.').split(';')]
forcedDisplacement = float(str(forcedDisplacement).strip())
eigenmodeNumber = [int(i) for i in str(eigenmodeNumber).strip().replace(',','.').split(';')]
imperfectionAmplitude = [float(i) for i in str(imperfectionAmplitude).strip().replace(',','.').split(';')]



logger.info( 'JOB PARAMETERS')
logger.info( '-----------------------------------------------------------')
logger.info( 'jobName                   = {}'.format(jobName))
logger.info( 'height                    = {}'.format(height))
logger.info( 'width                     = {}'.format(width))
logger.info( 'tf                        = {}'.format(tf))
logger.info( 'tw                        = {}'.format(tw))
logger.info( 'length                    = {}'.format(length))
logger.info( 'materialTypeRO            = {}'.format(materialTypeRO))
logger.info( 'edgeSeed                  = {}'.format(edgeSeed))
logger.info( 'globalSeed                = {}'.format(globalSeed))
logger.info( 'weblinesInput             = {}'.format(weblinesInput))
logger.info( 'residualStressWebInput    = {}'.format(residualStressWebInput))
logger.info( 'flangelinesInput          = {}'.format(flangelinesInput))
logger.info( 'residualStressFlangeInput = {}'.format(residualStressFlangeInput))
logger.info( 'forcedDisplacement        = {}'.format(forcedDisplacement))
logger.info( 'eigenmodeNumber           = {}'.format(eigenmodeNumber))
logger.info( '-----------------------------------------------------------')



sum = 0.0
weblines = []
for i in range(len(weblinesInput)):
    sum = sum + weblinesInput[i]
    weblines.append(round(((height - tf)/2.0)-sum, 2))

# Calculate y lines Residual Stress Web
residualStressWeb = []
residualStressWeb.append((((height - tf)/2.0) + weblines[0])/2.0)

for i in range(len(weblines) - 1):
    residualStressWeb.append((weblines[i] + weblines[i+1]) / 2.0)

residualStressWeb.append( weblines[len(weblines) - 1] / 2.0) 

sum = 0.0
flangelines = []
for i in range(len(flangelinesInput)):
    sum = sum + flangelinesInput[i]
    flangelines.append(round(sum, 2))

# Calculate x lines Residual Stress Flange
residualStressFlange = []
residualStressFlange.append((flangelines[0])/2.0)

for i in range(len(flangelines) - 1):
    residualStressFlange.append((flangelines[i] + flangelines[i+1]) / 2.0)

residualStressFlange.append( (flangelines[len(flangelines)- 1 ]+(width/2.0)) / 2.0) 

materialType = 'Elastic stainless steel'

modelName ='I {}x{}x{}x{}-{}'.format(str(int(height)), str(int(width)), str(int(tf)),
   str(int(tw)), str(int(length)))


# 1. DRAW COLUMN CROSS-SECTION
# PARAMETERS: height, width, tf

point1x = -width/2.0
point1y = (height-tf)/2.0
point2x = -point1x
point2y = point1y

mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(point1x, point1y), 
    point2=(point2x, point2y))

point1x = -width/2.0
point1y = -(height-tf)/2.0
point2x = -point1x
point2y = point1y

mdb.models['Model-1'].sketches['__profile__'].Line(point1=(point1x, point1y), 
    point2=(point2x, point2y))

point1y = (height-tf)/2.0
point2y = -point1y

mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, point1y), point2=
    (0.0, point2y))


mdb.models['Model-1'].Part(dimensionality=THREE_D, name=modelName, 
    type=DEFORMABLE_BODY)
mdb.models['Model-1'].parts[modelName].BaseShellExtrude(depth=length
    , sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']


# 2 DRAW ENDPLATE

mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(-150.0, -150.0)
    , point2=(150.0, 150.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Endplate', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Endplate'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']

#3 ASSEMBLE COLUMN AND ENDPLATES

mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name=
    modelName, part=
    mdb.models['Model-1'].parts[modelName])
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name='Endplate-1', 
    part=mdb.models['Model-1'].parts['Endplate'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=OFF, name='Endplate-2', 
    part=mdb.models['Model-1'].parts['Endplate'])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Endplate-2', ), 
    vector=(0.0, 0.0, length))
mdb.models['Model-1'].rootAssembly._previewMergeMeshes(instances=(
    mdb.models['Model-1'].rootAssembly.instances[modelName], 
    mdb.models['Model-1'].rootAssembly.instances['Endplate-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Endplate-2']), 
    keepOnlyOrphanElems=True, mergeBoundaryOnly=False, nodeMergingTolerance=
    1e-06)
mdb.models['Model-1'].rootAssembly.InstanceFromBooleanMerge(domain=BOTH, 
    instances=(
    mdb.models['Model-1'].rootAssembly.instances[modelName], 
    mdb.models['Model-1'].rootAssembly.instances['Endplate-1'], 
    mdb.models['Model-1'].rootAssembly.instances['Endplate-2']), mergeNodes=ALL
    , name='{} w endplates'.format(modelName), nodeMergingTolerance=1e-06, 
    originalInstances=SUPPRESS)


#4 CREATE MATERIALS

mdb.models['Model-1'].Material(name='Carbon steel')
mdb.models['Model-1'].materials['Carbon steel'].Density(table=((7.69771e-05, ), 
    ))
mdb.models['Model-1'].materials['Carbon steel'].Elastic(table=((210000.0, 0.3), 
    ))
mdb.models['Model-1'].Material(name='Elastic stainless steel')
mdb.models['Model-1'].materials['Elastic stainless steel'].Density(table=((
    7.69771e-05, ), ))
mdb.models['Model-1'].materials['Elastic stainless steel'].Elastic(table=((
    200000.0, 0.3), ))
mdb.models['Model-1'].Material(name='Aust4301')
mdb.models['Model-1'].materials['Aust4301'].Density(table=((7.69771e-05, 
    ), ))
mdb.models['Model-1'].materials['Aust4301'].Elastic(table=((200000.0, 
    0.3), ))
mdb.models['Model-1'].materials['Aust4301'].Plastic(table=((51.013, 0.0), 
    (52.014, 1e-08), (53.014, 3e-08), (54.015, 4e-08), (55.015, 6e-08), (
    56.016, 7e-08), (57.016, 1e-07), (58.017, 1.2e-07), (59.017, 1.5e-07), (
    60.018, 1.8e-07), (61.019, 2.1e-07), (62.019, 2.5e-07), (63.02, 2.9e-07), (
    64.021, 3.3e-07), (65.021, 3.9e-07), (66.022, 4.4e-07), (67.022, 5e-07), (
    68.023, 5.7e-07), (69.024, 6.5e-07), (70.025, 7.3e-07), (71.025, 8.2e-07), 
    (72.026, 9.2e-07), (73.027, 1.03e-06), (74.027, 1.14e-06), (75.028, 
    1.27e-06), (76.029, 1.41e-06), (77.03, 1.56e-06), (78.031, 1.72e-06), (
    79.031, 1.9e-06), (80.032, 2.09e-06), (81.033, 2.29e-06), (82.034, 
    2.51e-06), (83.035, 2.75e-06), (84.036, 3.01e-06), (85.036, 3.29e-06), (
    86.037, 3.58e-06), (87.038, 3.9e-06), (88.039, 4.24e-06), (89.04, 
    4.61e-06), (90.041, 5e-06), (91.042, 5.42e-06), (92.043, 5.87e-06), (
    93.044, 6.35e-06), (94.045, 6.86e-06), (95.046, 7.41e-06), (96.047, 
    7.99e-06), (97.048, 8.61e-06), (98.049, 9.27e-06), (99.05, 9.97e-06), (
    100.051, 1.072e-05), (101.052, 1.151e-05), (102.053, 1.235e-05), (103.054, 
    1.325e-05), (104.056, 1.419e-05), (105.057, 1.52e-05), (106.058, 
    1.626e-05), (107.059, 1.738e-05), (108.06, 1.857e-05), (109.062, 
    1.983e-05), (110.063, 2.116e-05), (111.064, 2.257e-05), (112.065, 
    2.405e-05), (113.067, 2.562e-05), (114.068, 2.727e-05), (115.07, 
    2.901e-05), (116.071, 3.084e-05), (117.072, 3.277e-05), (118.074, 
    3.481e-05), (119.075, 3.695e-05), (120.077, 3.92e-05), (121.078, 
    4.157e-05), (122.08, 4.406e-05), (123.081, 4.667e-05), (124.083, 
    4.942e-05), (125.085, 5.23e-05), (126.086, 5.532e-05), (127.088, 
    5.849e-05), (128.09, 6.182e-05), (129.092, 6.53e-05), (130.094, 6.895e-05), 
    (131.095, 7.278e-05), (132.097, 7.678e-05), (133.099, 8.097e-05), (134.101, 
    8.535e-05), (135.103, 8.994e-05), (136.105, 9.473e-05), (137.108, 
    9.974e-05), (138.11, 0.00010497), (139.112, 0.00011044), (140.114, 
    0.00011615), (141.117, 0.00012211), (142.119, 0.00012833), (143.122, 
    0.00013481), (144.124, 0.00014158), (145.127, 0.00014863), (146.13, 
    0.00015598), (147.132, 0.00016364), (148.135, 0.00017162), (149.138, 
    0.00017993), (150.141, 0.00018858), (151.144, 0.00019759), (152.147, 
    0.00020696), (153.15, 0.0002167), (154.154, 0.00022684), (155.157, 
    0.00023738), (156.161, 0.00024834), (157.164, 0.00025972), (158.168, 
    0.00027155), (159.172, 0.00028384), (160.176, 0.0002966), (161.18, 
    0.00030985), (162.184, 0.0003236), (163.188, 0.00033787), (164.193, 
    0.00035267), (165.197, 0.00036803), (166.202, 0.00038395), (167.207, 
    0.00040047), (168.212, 0.00041758), (169.217, 0.00043532), (170.222, 
    0.00045369), (171.227, 0.00047273), (172.233, 0.00049245), (173.239, 
    0.00051287), (174.245, 0.000534), (175.251, 0.00055588), (176.257, 
    0.00057852), (177.264, 0.00060195), (178.27, 0.00062618), (179.277, 
    0.00065125), (180.284, 0.00067716), (181.292, 0.00070396), (182.299, 
    0.00073166), (183.307, 0.00076028), (184.315, 0.00078986), (185.323, 
    0.00082042), (186.332, 0.00085198), (187.341, 0.00088458), (188.35, 
    0.00091824), (189.359, 0.00095299), (190.369, 0.00098886), (191.379, 
    0.00102588), (192.389, 0.00106408), (193.4, 0.00110349), (194.411, 
    0.00114414), (195.422, 0.00118607), (196.434, 0.0012293), (197.446, 
    0.00127388), (198.458, 0.00131984), (199.471, 0.0013672), (200.484, 
    0.00141601), (201.498, 0.00146631), (202.512, 0.00151813), (203.526, 
    0.00157151), (204.541, 0.00162648), (205.556, 0.00168309), (206.572, 
    0.00174138), (207.589, 0.00180139), (208.605, 0.00186316), (209.623, 
    0.00192674), (210.641, 0.00199216), (211.659, 0.00206143), (212.68, 
    0.00213764), (213.702, 0.00222151), (214.726, 0.00231349), (215.752, 
    0.00241387), (216.78, 0.00252291), (217.811, 0.00264081), (218.844, 
    0.00276775), (219.878, 0.00290389), (220.916, 0.00304937), (221.955, 
    0.00320431), (222.998, 0.00336883), (224.042, 0.00354303), (225.09, 
    0.00372701), (226.139, 0.00392086), (227.192, 0.00412466), (228.247, 
    0.00433849), (229.305, 0.00456243), (230.366, 0.00479654), (231.43, 
    0.00504088), (232.497, 0.00529553), (233.566, 0.00556054), (234.639, 
    0.00583596), (235.715, 0.00612185), (236.793, 0.00641825), (237.875, 
    0.00672521), (238.96, 0.00704278), (240.049, 0.007371), (241.14, 
    0.00770991), (242.235, 0.00805954), (243.334, 0.00841995), (244.435, 
    0.00879115), (245.541, 0.00917318), (246.649, 0.00956608), (247.762, 
    0.00996987), (248.877, 0.01038458), (249.997, 0.01081024), (251.12, 
    0.01124688), (252.247, 0.01169451), (253.378, 0.01215317), (254.512, 
    0.01262287), (255.65, 0.01310363), (256.793, 0.01359548), (257.939, 
    0.01409842), (259.089, 0.01461249), (260.243, 0.01513768), (261.401, 
    0.01567403), (262.564, 0.01622154), (263.73, 0.01678022), (264.901, 
    0.01735008), (266.076, 0.01793115), (267.255, 0.01852342), (268.439, 
    0.01912691), (269.627, 0.01974162), (270.819, 0.02036756), (272.016, 
    0.02100474), (273.217, 0.02165316), (274.423, 0.02231282), (275.634, 
    0.02298374), (276.849, 0.02366591), (278.069, 0.02435933), (279.293, 
    0.02506401), (280.523, 0.02577995), (281.757, 0.02650714), (282.996, 
    0.02724559), (284.24, 0.02799529), (285.488, 0.02875624), (286.742, 
    0.02952844), (288.001, 0.03031188), (289.265, 0.03110656), (290.534, 
    0.03191248), (291.808, 0.03272962), (293.087, 0.03355798), (294.372, 
    0.03439756), (295.662, 0.03524834), (296.957, 0.03611031), (298.257, 
    0.03698348), (299.563, 0.03786782), (300.875, 0.03876333), (302.192, 
    0.03966999), (303.514, 0.04058779), (304.842, 0.04151673), (306.176, 
    0.04245678), (307.515, 0.04340794), (308.861, 0.04437019), (310.211, 
    0.04534351), (311.568, 0.04632789), (312.931, 0.04732332), (314.299, 
    0.04832977), (315.673, 0.04934724), (317.054, 0.05037569), (318.44, 
    0.05141512), (319.833, 0.05246551), (321.231, 0.05352684), (322.636, 
    0.05459908), (324.047, 0.05568222), (325.464, 0.05677624), (326.887, 
    0.05788111), (328.317, 0.05899681), (329.753, 0.06012333), (331.196, 
    0.06126064), (332.645, 0.06240871), (334.1, 0.06356753), (335.562, 
    0.06473706), (337.031, 0.06591729), (338.506, 0.06710819), (339.988, 
    0.06830973), (341.477, 0.06952189), (342.973, 0.07074464), (344.475, 
    0.07197796), (345.984, 0.07322181), (347.5, 0.07447618), (349.023, 
    0.07574103), (350.553, 0.07701633), (352.09, 0.07830206), (353.634, 
    0.07959819), (355.186, 0.08090468), (356.744, 0.08222151), (358.31, 
    0.08354865), (359.883, 0.08488606), (361.463, 0.08623372), (363.05, 
    0.0875916), (364.645, 0.08895966), (366.248, 0.09033787), (367.858, 
    0.09172619), (369.475, 0.0931246), (371.1, 0.09453307), (372.733, 
    0.09595155), (374.373, 0.09738002), (376.021, 0.09881844), (377.676, 
    0.10026678), (379.34, 0.101725), (381.011, 0.10319307), (382.69, 
    0.10467095), (384.377, 0.10615861), (386.072, 0.107656), (387.776, 
    0.10916311), (389.487, 0.11067988), (391.206, 0.11220628), (392.933, 
    0.11374227), (394.669, 0.11528783), (396.413, 0.1168429), (398.165, 
    0.11840746), (399.925, 0.11998145), (401.694, 0.12156486), (403.471, 
    0.12315763), (405.257, 0.12475973), (407.051, 0.12637113), (408.854, 
    0.12799177), (410.665, 0.12962162), (412.485, 0.13126065), (414.314, 
    0.1329088), (416.152, 0.13456605), (417.998, 0.13623235), (419.853, 
    0.13790766), (421.717, 0.13959195), (423.59, 0.14128516), (425.471, 
    0.14298726), (427.362, 0.14469821), (429.262, 0.14641796), (431.171, 
    0.14814648), (433.089, 0.14988372), (435.016, 0.15162964), (436.953, 
    0.1533842), (438.898, 0.15514736), (440.853, 0.15691908), (442.818, 
    0.1586993), (444.792, 0.160488), (446.775, 0.16228512), (448.768, 
    0.16409063), (450.77, 0.16590448), (452.782, 0.16772662), (454.804, 
    0.16955702), (456.835, 0.17139564), (458.876, 0.17324242), (460.927, 
    0.17509732), (462.987, 0.1769603), (465.058, 0.17883133), (467.138, 
    0.18071034), (469.229, 0.18259731), (471.329, 0.18449218), (473.439, 
    0.18639491), (475.56, 0.18830545), (477.691, 0.19022377), (479.831, 
    0.19214982), (481.982, 0.19408355), (484.144, 0.19602493), (486.315, 
    0.19797389), (488.497, 0.19993041), (490.69, 0.20189443), (492.893, 
    0.20386591), (495.106, 0.20584481), (497.33, 0.20783108), (499.565, 
    0.20982468), (501.81, 0.21182556), (504.066, 0.21383367), (506.333, 
    0.21584898), (508.61, 0.21787144), (510.898, 0.21990099), (513.197, 
    0.22193761), (515.508, 0.22398123), (517.829, 0.22603183), (520.161, 
    0.22808934), (522.504, 0.23015373), (524.858, 0.23222496), (527.223, 
    0.23430297), (529.6, 0.23638772), (531.988, 0.23847917), (534.387, 
    0.24057728), (536.797, 0.24268199), (539.219, 0.24479326), (541.652, 
    0.24691105), (544.097, 0.24903531), (546.554, 0.251166), (549.021, 
    0.25330307), (551.501, 0.25544648), (553.992, 0.25759618), (556.495, 
    0.25975214), (559.009, 0.26191429), (561.536, 0.2640826), (564.074, 
    0.26625703), (566.624, 0.26843753), (569.186, 0.27062405), (571.76, 
    0.27281656), (574.346, 0.275015), (576.945, 0.27721933), (579.555, 
    0.27942951), (582.177, 0.28164549), (584.812, 0.28386724), (587.459, 
    0.28609469), (590.118, 0.28832782), (592.79, 0.29056658), (595.474, 
    0.29281092), (598.171, 0.2950608), (600.88, 0.29731617), (603.601, 
    0.299577), (606.336, 0.30184324), (609.082, 0.30411484), (611.842, 
    0.30639176), (614.614, 0.30867396), (617.399, 0.3109614), (620.197, 
    0.31325403), (623.008, 0.3155518), (625.831, 0.31785469), (628.668, 
    0.32016263), (631.518, 0.3224756), (634.38, 0.32479355), (637.256, 
    0.32711643), (640.145, 0.3294442), (643.047, 0.33177683), (645.963, 
    0.33411426), (648.892, 0.33645647), (651.834, 0.33880339), (654.789, 
    0.341155), (657.758, 0.34351125), (660.741, 0.3458721), (663.737, 
    0.3482375), (666.746, 0.35060743), (669.769, 0.35298183), (672.806, 
    0.35536066), (675.857, 0.35774388), (678.921, 0.36013146), (681.999, 
    0.36252335), (685.091, 0.36491951), (688.197, 0.3673199), (691.317, 
    0.36972449), (694.451, 0.37213322), (697.599, 0.37454606), (700.761, 
    0.37696297), (703.938, 0.37938391), (707.128, 0.38180884), (710.333, 
    0.38423772), (713.552, 0.38667052), (716.785, 0.38910718), (720.033, 
    0.39154768), (723.295, 0.39399197), (726.572, 0.39644002), (729.863, 
    0.39889179), (733.169, 0.40134723), (736.489, 0.40380631), (739.824, 
    0.40626899), (743.174, 0.40873524), (746.538, 0.41120501), (749.918, 
    0.41367827), (753.312, 0.41615498), (756.721, 0.4186351), (760.145, 
    0.4211186), (763.584, 0.42360543), (767.038, 0.42609557), (770.508, 
    0.42858897), (773.992, 0.43108559), (777.492, 0.43358541), (781.007, 
    0.43608838), (784.537, 0.43859447), (788.082, 0.44110364), (791.643, 
    0.44361585), (795.22, 0.44613108), (798.811, 0.44864928), (802.419, 
    0.45117042), (806.042, 0.45369446), (809.68, 0.45622137), (813.334, 
    0.45875112), (817.004, 0.46128366), (820.69, 0.46381897), (824.392, 
    0.466357), (828.109, 0.46889774), (831.843, 0.47144113), (835.592, 
    0.47398715), (839.357, 0.47653576), (843.139, 0.47908693)))

mdb.models['Model-1'].Material(name='Dupl4462')
mdb.models['Model-1'].materials['Dupl4462'].Elastic(table=((200000.0, 0.3), ))

mdb.models['Model-1'].materials['Dupl4462'].Density(table=((7.69771e-05, ), ))

mdb.models['Model-1'].materials['Dupl4462'].Plastic(table=((183.168, 0.0), (
    184.17, 4e-08), (185.171, 8e-08), (186.173, 1.3e-07), (187.175, 1.8e-07), (
    188.177, 2.3e-07), (189.179, 2.8e-07), (190.181, 3.4e-07), (191.183, 
    4e-07), (192.185, 4.6e-07), (193.187, 5.2e-07), (194.189, 5.9e-07), (
    195.191, 6.6e-07), (196.193, 7.3e-07), (197.194, 8e-07), (198.196, 
    8.8e-07), (199.198, 9.6e-07), (200.201, 1.05e-06), (201.203, 1.14e-06), (
    202.205, 1.23e-06), (203.207, 1.33e-06), (204.209, 1.43e-06), (205.211, 
    1.53e-06), (206.213, 1.64e-06), (207.215, 1.75e-06), (208.217, 1.87e-06), (
    209.219, 1.99e-06), (210.221, 2.11e-06), (211.223, 2.24e-06), (212.226, 
    2.38e-06), (213.228, 2.52e-06), (214.23, 2.66e-06), (215.232, 2.81e-06), (
    216.234, 2.97e-06), (217.237, 3.13e-06), (218.239, 3.3e-06), (219.241, 
    3.47e-06), (220.243, 3.65e-06), (221.245, 3.83e-06), (222.248, 4.02e-06), (
    223.25, 4.22e-06), (224.252, 4.43e-06), (225.255, 4.64e-06), (226.257, 
    4.86e-06), (227.259, 5.09e-06), (228.262, 5.32e-06), (229.264, 5.56e-06), (
    230.266, 5.81e-06), (231.269, 6.07e-06), (232.271, 6.34e-06), (233.273, 
    6.61e-06), (234.276, 6.89e-06), (235.278, 7.19e-06), (236.281, 7.49e-06), (
    237.283, 7.8e-06), (238.286, 8.12e-06), (239.288, 8.45e-06), (240.291, 
    8.8e-06), (241.293, 9.15e-06), (242.296, 9.51e-06), (243.298, 9.89e-06), (
    244.301, 1.027e-05), (245.303, 1.067e-05), (246.306, 1.108e-05), (247.308, 
    1.15e-05), (248.311, 1.193e-05), (249.314, 1.238e-05), (250.316, 
    1.284e-05), (251.319, 1.332e-05), (252.322, 1.38e-05), (253.324, 1.43e-05), 
    (254.327, 1.482e-05), (255.33, 1.535e-05), (256.332, 1.59e-05), (257.335, 
    1.646e-05), (258.338, 1.704e-05), (259.341, 1.763e-05), (260.343, 
    1.824e-05), (261.346, 1.887e-05), (262.349, 1.952e-05), (263.352, 
    2.018e-05), (264.355, 2.086e-05), (265.358, 2.157e-05), (266.36, 
    2.229e-05), (267.363, 2.302e-05), (268.366, 2.378e-05), (269.369, 
    2.457e-05), (270.372, 2.537e-05), (271.375, 2.619e-05), (272.378, 
    2.703e-05), (273.381, 2.79e-05), (274.384, 2.879e-05), (275.387, 
    2.971e-05), (276.39, 3.064e-05), (277.393, 3.161e-05), (278.396, 
    3.259e-05), (279.399, 3.361e-05), (280.403, 3.465e-05), (281.406, 
    3.571e-05), (282.409, 3.68e-05), (283.412, 3.793e-05), (284.415, 
    3.908e-05), (285.419, 4.025e-05), (286.422, 4.146e-05), (287.425, 
    4.27e-05), (288.428, 4.397e-05), (289.432, 4.527e-05), (290.435, 
    4.661e-05), (291.438, 4.797e-05), (292.442, 4.938e-05), (293.445, 
    5.081e-05), (294.449, 5.228e-05), (295.452, 5.379e-05), (296.455, 
    5.533e-05), (297.459, 5.691e-05), (298.463, 5.853e-05), (299.466, 
    6.019e-05), (300.47, 6.188e-05), (301.473, 6.362e-05), (302.477, 6.54e-05), 
    (303.481, 6.722e-05), (304.484, 6.908e-05), (305.488, 7.099e-05), (306.492, 
    7.294e-05), (307.495, 7.494e-05), (308.499, 7.698e-05), (309.503, 
    7.908e-05), (310.507, 8.122e-05), (311.511, 8.341e-05), (312.515, 
    8.565e-05), (313.519, 8.794e-05), (314.523, 9.028e-05), (315.527, 
    9.268e-05), (316.531, 9.513e-05), (317.535, 9.763e-05), (318.539, 
    0.0001002), (319.543, 0.00010282), (320.547, 0.00010549), (321.551, 
    0.00010823), (322.556, 0.00011103), (323.56, 0.00011389), (324.564, 
    0.00011682), (325.568, 0.0001198), (326.573, 0.00012286), (327.577, 
    0.00012598), (328.582, 0.00012917), (329.586, 0.00013242), (330.591, 
    0.00013575), (331.595, 0.00013915), (332.6, 0.00014262), (333.605, 
    0.00014617), (334.609, 0.00014979), (335.614, 0.00015349), (336.619, 
    0.00015727), (337.624, 0.00016113), (338.629, 0.00016507), (339.634, 
    0.00016909), (340.639, 0.0001732), (341.644, 0.00017739), (342.649, 
    0.00018167), (343.654, 0.00018604), (344.659, 0.0001905), (345.664, 
    0.00019505), (346.669, 0.0001997), (347.675, 0.00020444), (348.68, 
    0.00020928), (349.686, 0.00021421), (350.691, 0.00021925), (351.697, 
    0.00022439), (352.702, 0.00022963), (353.708, 0.00023498), (354.714, 
    0.00024044), (355.719, 0.000246), (356.725, 0.00025168), (357.731, 
    0.00025747), (358.737, 0.00026337), (359.743, 0.00026939), (360.749, 
    0.00027553), (361.755, 0.00028179), (362.762, 0.00028818), (363.768, 
    0.00029469), (364.774, 0.00030132), (365.781, 0.00030809), (366.787, 
    0.00031498), (367.794, 0.00032201), (368.801, 0.00032918), (369.807, 
    0.00033648), (370.814, 0.00034393), (371.821, 0.00035151), (372.828, 
    0.00035924), (373.835, 0.00036712), (374.842, 0.00037515), (375.849, 
    0.00038333), (376.857, 0.00039166), (377.864, 0.00040015), (378.872, 
    0.0004088), (379.879, 0.00041762), (380.887, 0.00042659), (381.895, 
    0.00043574), (382.902, 0.00044505), (383.91, 0.00045454), (384.918, 
    0.0004642), (385.927, 0.00047404), (386.935, 0.00048406), (387.943, 
    0.00049426), (388.952, 0.00050465), (389.96, 0.00051523), (390.969, 
    0.00052601), (391.977, 0.00053697), (392.986, 0.00054814), (393.995, 
    0.00055951), (395.004, 0.00057108), (396.014, 0.00058286), (397.023, 
    0.00059485), (398.032, 0.00060705), (399.042, 0.00061947), (400.052, 
    0.00063212), (401.062, 0.00064498), (402.071, 0.00065807), (403.082, 
    0.0006714), (404.092, 0.00068496), (405.102, 0.00069875), (406.113, 
    0.00071279), (407.123, 0.00072707), (408.134, 0.0007416), (409.145, 
    0.00075638), (410.156, 0.00077142), (411.167, 0.00078672), (412.178, 
    0.00080228), (413.19, 0.00081811), (414.202, 0.00083421), (415.213, 
    0.00085058), (416.225, 0.00086723), (417.238, 0.00088417), (418.25, 
    0.0009014), (419.262, 0.00091891), (420.275, 0.00093672), (421.288, 
    0.00095484), (422.301, 0.00097325), (423.314, 0.00099198), (424.327, 
    0.00101102), (425.341, 0.00103037), (426.354, 0.00105005), (427.368, 
    0.00107005), (428.382, 0.00109039), (429.397, 0.00111106), (430.411, 
    0.00113207), (431.426, 0.00115343), (432.441, 0.00117514), (433.456, 
    0.0011972), (434.471, 0.00121962), (435.487, 0.00124241), (436.503, 
    0.00126557), (437.518, 0.0012891), (438.535, 0.00131302), (439.551, 
    0.00133732), (440.568, 0.00136201), (441.585, 0.00138709), (442.602, 
    0.00141258), (443.619, 0.00143848), (444.637, 0.00146479), (445.655, 
    0.00149151), (446.673, 0.00151867), (447.691, 0.00154625), (448.71, 
    0.00157427), (449.729, 0.00160272), (450.748, 0.00163163), (451.767, 
    0.00166099), (452.787, 0.00169081), (453.807, 0.00172109), (454.827, 
    0.00175185), (455.848, 0.00178308), (456.869, 0.0018148), (457.89, 
    0.00184701), (458.912, 0.00187972), (459.933, 0.00191293), (460.956, 
    0.00194665), (461.978, 0.00198089), (463.001, 0.00201543), (464.024, 
    0.00205025), (465.047, 0.00208561), (466.07, 0.0021218), (467.095, 
    0.00215909), (468.12, 0.00219777), (469.146, 0.00223811), (470.172, 
    0.00228041), (471.201, 0.00232493), (472.23, 0.00237197), (473.261, 
    0.00242181), (474.293, 0.00247472), (475.327, 0.002531), (476.363, 
    0.00259093), (477.401, 0.00265479), (478.441, 0.00272286), (479.483, 
    0.00279543), (480.528, 0.00287278), (481.576, 0.00295519), (482.626, 
    0.00304296), (483.679, 0.00313636), (484.736, 0.00323568), (485.795, 
    0.0033412), (486.858, 0.00345321), (487.924, 0.00357199), (488.995, 
    0.00369782), (490.069, 0.00383099), (491.147, 0.00397178), (492.229, 
    0.00412047), (493.316, 0.00427735), (494.407, 0.0044427), (495.503, 
    0.0046168), (496.604, 0.00479993), (497.709, 0.00499238), (498.82, 
    0.00519442), (499.937, 0.00540634), (501.059, 0.00562842), (502.187, 
    0.00586093), (503.32, 0.00610416), (504.46, 0.00635839), (505.606, 
    0.00662389), (506.759, 0.00690094), (507.918, 0.00718982), (509.084, 
    0.0074908), (510.257, 0.00780417), (511.437, 0.00813019), (512.624, 
    0.00846914), (513.819, 0.00882129), (515.022, 0.00918692), (516.233, 
    0.0095663), (517.452, 0.00995969), (518.679, 0.01036737), (519.915, 
    0.01078961), (521.159, 0.01122668), (522.413, 0.01167883), (523.675, 
    0.01214634), (524.947, 0.01262947), (526.228, 0.01312848), (527.519, 
    0.01364365), (528.82, 0.01417521), (530.131, 0.01472344), (531.452, 
    0.0152886), (532.784, 0.01587093), (534.127, 0.0164707), (535.48, 
    0.01708816), (536.845, 0.01772356), (538.221, 0.01837714), (539.608, 
    0.01904917), (541.008, 0.01973988), (542.419, 0.02044952), (543.842, 
    0.02117834), (545.278, 0.02192657), (546.727, 0.02269446), (548.188, 
    0.02348224), (549.663, 0.02429015), (551.151, 0.02511842), (552.652, 
    0.02596729), (554.167, 0.02683698), (555.696, 0.02772772), (557.239, 
    0.02863974), (558.797, 0.02957326), (560.369, 0.03052849), (561.957, 
    0.03150567), (563.559, 0.032505), (565.177, 0.0335267), (566.81, 
    0.03457098), (568.459, 0.03563805), (570.124, 0.03672811), (571.805, 
    0.03784136), (573.503, 0.03897801), (575.218, 0.04013826), (576.95, 
    0.0413223), (578.699, 0.04253032), (580.465, 0.04376251), (582.249, 
    0.04501906), (584.051, 0.04630015), (585.872, 0.04760597), (587.71, 
    0.04893668), (589.568, 0.05029247), (591.444, 0.05167351), (593.34, 
    0.05307996), (595.255, 0.054512), (597.19, 0.05596977), (599.145, 
    0.05745345), (601.12, 0.05896318), (603.116, 0.06049912), (605.132, 
    0.06206142), (607.169, 0.06365023), (609.228, 0.06526567), (611.308, 
    0.06690791), (613.41, 0.06857705), (615.534, 0.07027325), (617.68, 
    0.07199663), (619.849, 0.07374731), (622.041, 0.07552542), (624.256, 
    0.07733106), (626.494, 0.07916436), (628.756, 0.08102542), (631.042, 
    0.08291435), (633.352, 0.08483126), (635.686, 0.08677623), (638.046, 
    0.08874937), (640.43, 0.09075077), (642.84, 0.09278051), (645.275, 
    0.09483868), (647.736, 0.09692535), (650.224, 0.09904061), (652.738, 
    0.10118452), (655.278, 0.10335715), (657.846, 0.10555857), (660.441, 
    0.10778883), (663.063, 0.110048), (665.713, 0.11233612), (668.392, 
    0.11465325), (671.099, 0.11699942), (673.834, 0.11937468), (676.599, 
    0.12177906), (679.393, 0.1242126), (682.217, 0.12667533), (685.071, 
    0.12916726), (687.955, 0.13168843), (690.869, 0.13423884), (693.815, 
    0.13681851), (696.791, 0.13942745), (699.799, 0.14206567), (702.839, 
    0.14473316), (705.91, 0.14742992), (709.014, 0.15015595), (712.151, 
    0.15291124), (715.321, 0.15569576), (718.524, 0.15850951), (721.761, 
    0.16135246), (725.031, 0.16422458), (728.336, 0.16712584), (731.675, 
    0.17005622), (735.05, 0.17301567), (738.459, 0.17600415), (741.904, 
    0.17902163), (745.385, 0.18206804), (748.901, 0.18514334), (752.455, 
    0.18824747), (756.045, 0.19138038), (759.672, 0.19454199), (763.337, 
    0.19773225), (767.039, 0.20095109), (770.78, 0.20419843), (774.559, 
    0.20747419), (778.376, 0.21077829), (782.233, 0.21411066), (786.13, 
    0.2174712), (790.066, 0.22085982), (794.042, 0.22427644), (798.058, 
    0.22772095), (802.116, 0.23119325), (806.214, 0.23469325), (810.354, 
    0.23822083), (814.536, 0.24177589), (818.76, 0.24535831), (823.026, 
    0.24896798), (827.335, 0.25260479)))

mdb.models['Model-1'].Material(name='Ferr4512')
mdb.models['Model-1'].materials['Ferr4512'].Density(table=((7.69771e-05, ), 
    ))
mdb.models['Model-1'].materials['Ferr4512'].Elastic(table=((200000.0, 0.3), 
    ))
mdb.models['Model-1'].materials['Ferr4512'].Plastic(table=((116.067, 0.0), (
    117.069, 4e-08), (118.07, 1e-07), (119.071, 1.7e-07), (120.072, 2.5e-07), (
    121.073, 3.4e-07), (122.075, 4.4e-07), (123.076, 5.5e-07), (124.077, 
    6.7e-07), (125.078, 8.1e-07), (126.08, 9.7e-07), (127.081, 1.14e-06), (
    128.082, 1.34e-06), (129.083, 1.55e-06), (130.085, 1.79e-06), (131.086, 
    2.06e-06), (132.088, 2.35e-06), (133.089, 2.67e-06), (134.09, 3.03e-06), (
    135.092, 3.43e-06), (136.093, 3.87e-06), (137.095, 4.35e-06), (138.096, 
    4.88e-06), (139.097, 5.46e-06), (140.099, 6.11e-06), (141.1, 6.81e-06), (
    142.102, 7.59e-06), (143.104, 8.44e-06), (144.105, 9.37e-06), (145.107, 
    1.039e-05), (146.108, 1.151e-05), (147.11, 1.273e-05), (148.112, 
    1.407e-05), (149.113, 1.553e-05), (150.115, 1.713e-05), (151.117, 
    1.887e-05), (152.119, 2.077e-05), (153.121, 2.283e-05), (154.123, 
    2.509e-05), (155.125, 2.754e-05), (156.127, 3.021e-05), (157.129, 
    3.311e-05), (158.131, 3.626e-05), (159.133, 3.968e-05), (160.135, 
    4.339e-05), (161.137, 4.742e-05), (162.14, 5.179e-05), (163.142, 
    5.653e-05), (164.145, 6.166e-05), (165.147, 6.721e-05), (166.15, 
    7.322e-05), (167.153, 7.972e-05), (168.156, 8.675e-05), (169.159, 
    9.434e-05), (170.162, 0.00010255), (171.165, 0.0001114), (172.169, 
    0.00012095), (173.173, 0.00013126), (174.176, 0.00014237), (175.18, 
    0.00015434), (176.185, 0.00016724), (177.189, 0.00018112), (178.194, 
    0.00019607), (179.198, 0.00021214), (180.204, 0.00022943), (181.209, 
    0.00024801), (182.215, 0.00026798), (183.221, 0.00028943), (184.227, 
    0.00031245), (185.234, 0.00033716), (186.241, 0.00036367), (187.249, 
    0.0003921), (188.257, 0.00042257), (189.265, 0.00045523), (190.274, 
    0.00049021), (191.284, 0.00052766), (192.294, 0.00056776), (193.305, 
    0.00061066), (194.316, 0.00065655), (195.328, 0.00070561), (196.341, 
    0.00075806), (197.355, 0.0008141), (198.37, 0.00087396), (199.385, 
    0.00093788), (200.402, 0.00100611), (201.42, 0.00107891), (202.439, 
    0.00115658), (203.459, 0.0012394), (204.48, 0.00132769), (205.503, 
    0.00142178), (206.527, 0.00152202), (207.553, 0.00162878), (208.58, 
    0.00174245), (209.609, 0.00186343), (210.641, 0.00199216), (211.673, 
    0.00212545), (212.706, 0.00226087), (213.74, 0.00239945), (214.775, 
    0.002542), (215.812, 0.0026892), (216.85, 0.00284165), (217.889, 
    0.00299991), (218.93, 0.0031645), (219.974, 0.00333589), (221.019, 
    0.00351453), (222.066, 0.00370085), (223.115, 0.00389526), (224.167, 
    0.00409815), (225.221, 0.0043099), (226.278, 0.00453087), (227.337, 
    0.00476142), (228.399, 0.00500187), (229.464, 0.00525256), (230.532, 
    0.00551382), (231.603, 0.00578594), (232.677, 0.00606923), (233.754, 
    0.00636399), (234.835, 0.0066705), (235.919, 0.00698904), (237.007, 
    0.0073199), (238.099, 0.00766333), (239.194, 0.0080196), (240.294, 
    0.00838896), (241.397, 0.00877166), (242.504, 0.00916796), (243.616, 
    0.00957809), (244.732, 0.01000229), (245.852, 0.01044078), (246.977, 
    0.0108938), (248.107, 0.01136157), (249.241, 0.0118443), (250.381, 
    0.01234221), (251.525, 0.01285551), (252.674, 0.0133844), (253.829, 
    0.01392909), (254.988, 0.01448978), (256.153, 0.01506665), (257.324, 
    0.01565989), (258.5, 0.01626971), (259.682, 0.01689627), (260.87, 
    0.01753976), (262.063, 0.01820035), (263.263, 0.01887822), (264.469, 
    0.01957353), (265.681, 0.02028646), (266.899, 0.02101716), (268.124, 
    0.02176579), (269.356, 0.02253251), (270.594, 0.02331748), (271.839, 
    0.02412083), (273.091, 0.02494273), (274.35, 0.0257833), (275.616, 
    0.0266427), (276.889, 0.02752105), (278.17, 0.0284185), (279.458, 
    0.02933517), (280.753, 0.03027119), (282.057, 0.03122669), (283.368, 
    0.03220178), (284.687, 0.03319658), (286.014, 0.03421122), (287.35, 
    0.0352458), (288.693, 0.03630044), (290.045, 0.03737523), (291.406, 
    0.03847029), (292.775, 0.03958571), (294.153, 0.04072159), (295.54, 
    0.04187803), (296.935, 0.04305512), (298.34, 0.04425295), (299.754, 
    0.04547159), (301.177, 0.04671115), (302.61, 0.04797169), (304.052, 
    0.0492533), (305.504, 0.05055604), (306.966, 0.05188), (308.438, 
    0.05322523), (309.92, 0.05459181), (311.412, 0.0559798), (312.914, 
    0.05738925), (314.427, 0.05882024), (315.95, 0.0602728), (317.484, 
    0.061747), (319.029, 0.06324288), (320.584, 0.06476048), (322.151, 
    0.06629986), (323.729, 0.06786106), (325.318, 0.0694441), (326.919, 
    0.07104903), (328.531, 0.07267588), (330.154, 0.07432468), (331.79, 
    0.07599546), (333.437, 0.07768823), (335.097, 0.07940303), (336.769, 
    0.08113988), (338.453, 0.08289878), (340.149, 0.08467975), (341.858, 
    0.08648281), (343.58, 0.08830797), (345.314, 0.09015522), (347.062, 
    0.09202458), (348.822, 0.09391604), (350.596, 0.09582961), (352.383, 
    0.09776527), (354.183, 0.09972303), (355.998, 0.10170287), (357.826, 
    0.10370478), (359.667, 0.10572876), (361.523, 0.10777477), (363.393, 
    0.10984281), (365.277, 0.11193285), (367.176, 0.11404487), (369.089, 
    0.11617885), (371.017, 0.11833475), (372.96, 0.12051254), (374.917, 
    0.1227122), (376.89, 0.12493369), (378.878, 0.12717696), (380.881, 
    0.12944199), (382.9, 0.13172872), (384.934, 0.13403712), (386.985, 
    0.13636714), (389.051, 0.13871873), (391.133, 0.14109183), (393.231, 
    0.14348641), (395.346, 0.1459024), (397.477, 0.14833975), (399.625, 
    0.15079839), (401.79, 0.15327828), (403.971, 0.15577933), (406.17, 
    0.1583015), (408.385, 0.16084472), (410.618, 0.16340891), (412.869, 
    0.165994), (415.137, 0.16859993), (417.423, 0.17122662), (419.727, 
    0.173874), (422.049, 0.17654198), (424.389, 0.17923049), (426.747, 
    0.18193945), (429.124, 0.18466877), (431.519, 0.18741838), (433.933, 
    0.19018818), (436.366, 0.19297808), (438.819, 0.19578801), (441.29, 
    0.19861786), (443.781, 0.20146755), (446.291, 0.20433698), (448.821, 
    0.20722606), (451.371, 0.21013469), (453.94, 0.21306278), (456.53, 
    0.21601022), (459.14, 0.21897691), (461.771, 0.22196276), (464.422, 
    0.22496765), (467.093, 0.22799149), (469.786, 0.23103417), (472.499, 
    0.23409558), (475.234, 0.23717561), (477.99, 0.24027416), (480.768, 
    0.24339111), (483.567, 0.24652636), (486.388, 0.24967979), (489.23, 
    0.25285129), (492.095, 0.25604074), (494.982, 0.25924802), (497.892, 
    0.26247303), (500.824, 0.26571564), (503.779, 0.26897574), (506.756, 
    0.27225321), (509.757, 0.27554792), (512.781, 0.27885976), (515.828, 
    0.2821886), (518.898, 0.28553432), (521.993, 0.28889681), (525.111, 
    0.29227593), (528.253, 0.29567156), (531.419, 0.29908358), (534.609, 
    0.30251186), (537.824, 0.30595627), (541.063, 0.30941669), (544.327, 
    0.312893), (547.616, 0.31638505), (550.931, 0.31989273), (554.27, 
    0.32341591), (557.635, 0.32695445), (561.025, 0.33050823), (564.441, 
    0.33407711), (567.883, 0.33766097), (571.351, 0.34125968), (574.845, 
    0.3448731), (578.366, 0.34850111), (581.913, 0.35214356), (585.486, 
    0.35580034), (589.087, 0.3594713), (592.715, 0.36315631), (596.37, 
    0.36685525), (600.052, 0.37056798), (603.761, 0.37429437), (607.499, 
    0.37803428), (611.264, 0.38178758), (615.057, 0.38555414), (618.879, 
    0.38933382), (622.729, 0.3931265), (626.607, 0.39693203), (630.514, 
    0.40075029), (634.45, 0.40458114), (638.415, 0.40842445), (642.409, 
    0.41228008), (646.433, 0.41614791), (650.486, 0.4200278), (654.569, 
    0.42391961), (658.681, 0.42782322), (662.824, 0.43173849), (666.997, 
    0.43566529), (671.2, 0.43960349), (675.434, 0.44355295), (679.699, 
    0.44751355), (683.994, 0.45148515), (688.321, 0.45546762), (692.679, 
    0.45946083), (697.068, 0.46346465), (701.489, 0.46747896), (705.942, 
    0.47150361), (710.426, 0.47553848), (714.943, 0.47958344), (719.492, 
    0.48363836), (724.074, 0.48770311), (728.688, 0.49177757), (733.335, 
    0.49586161), (738.015, 0.4999551), (742.728, 0.5040579), (747.475, 
    0.50816991), (752.255, 0.51229098), (757.069, 0.516421)))

mdb.models['Model-1'].Material(name='Dupl4162')
mdb.models['Model-1'].materials['Dupl4162'].Density(table=((7.69771e-05, ), 
    ))
mdb.models['Model-1'].materials['Dupl4162'].Elastic(table=((200000.0, 0.3), 
    ))
mdb.models['Model-1'].materials['Dupl4162'].Plastic(table=((193.187, 0.0), 
    (194.188, 1e-08), (195.19, 6e-08), (196.192, 1e-07), (197.194, 1.5e-07), (
    198.196, 2e-07), (199.198, 2.6e-07), (200.2, 3.1e-07), (201.202, 3.7e-07), 
    (202.204, 4.3e-07), (203.206, 5e-07), (204.209, 5.6e-07), (205.211, 
    6.3e-07), (206.213, 7.1e-07), (207.215, 7.8e-07), (208.217, 8.6e-07), (
    209.219, 9.4e-07), (210.221, 1.03e-06), (211.223, 1.11e-06), (212.225, 
    1.2e-06), (213.227, 1.3e-06), (214.23, 1.4e-06), (215.232, 1.5e-06), (
    216.234, 1.61e-06), (217.236, 1.72e-06), (218.238, 1.83e-06), (219.241, 
    1.95e-06), (220.243, 2.07e-06), (221.245, 2.2e-06), (222.247, 2.33e-06), (
    223.25, 2.47e-06), (224.252, 2.61e-06), (225.254, 2.75e-06), (226.256, 
    2.9e-06), (227.259, 3.06e-06), (228.261, 3.22e-06), (229.263, 3.39e-06), (
    230.266, 3.56e-06), (231.268, 3.74e-06), (232.271, 3.92e-06), (233.273, 
    4.12e-06), (234.275, 4.31e-06), (235.278, 4.52e-06), (236.28, 4.73e-06), (
    237.283, 4.94e-06), (238.285, 5.17e-06), (239.287, 5.4e-06), (240.29, 
    5.63e-06), (241.292, 5.88e-06), (242.295, 6.13e-06), (243.297, 6.39e-06), (
    244.3, 6.66e-06), (245.302, 6.94e-06), (246.305, 7.23e-06), (247.307, 
    7.52e-06), (248.31, 7.82e-06), (249.313, 8.14e-06), (250.315, 8.46e-06), (
    251.318, 8.79e-06), (252.32, 9.13e-06), (253.323, 9.48e-06), (254.326, 
    9.85e-06), (255.328, 1.022e-05), (256.331, 1.06e-05), (257.334, 1.1e-05), (
    258.336, 1.14e-05), (259.339, 1.182e-05), (260.342, 1.225e-05), (261.345, 
    1.269e-05), (262.347, 1.314e-05), (263.35, 1.361e-05), (264.353, 
    1.409e-05), (265.356, 1.458e-05), (266.359, 1.509e-05), (267.361, 
    1.561e-05), (268.364, 1.614e-05), (269.367, 1.669e-05), (270.37, 
    1.726e-05), (271.373, 1.784e-05), (272.376, 1.843e-05), (273.379, 
    1.904e-05), (274.382, 1.967e-05), (275.385, 2.032e-05), (276.387, 
    2.098e-05), (277.39, 2.166e-05), (278.393, 2.235e-05), (279.396, 
    2.307e-05), (280.4, 2.38e-05), (281.403, 2.455e-05), (282.406, 2.532e-05), 
    (283.409, 2.612e-05), (284.412, 2.693e-05), (285.415, 2.776e-05), (286.418, 
    2.861e-05), (287.421, 2.949e-05), (288.424, 3.039e-05), (289.428, 
    3.131e-05), (290.431, 3.225e-05), (291.434, 3.321e-05), (292.437, 
    3.42e-05), (293.441, 3.522e-05), (294.444, 3.626e-05), (295.447, 
    3.732e-05), (296.45, 3.842e-05), (297.454, 3.953e-05), (298.457, 
    4.068e-05), (299.461, 4.185e-05), (300.464, 4.305e-05), (301.467, 
    4.428e-05), (302.471, 4.554e-05), (303.474, 4.683e-05), (304.478, 
    4.815e-05), (305.481, 4.95e-05), (306.485, 5.088e-05), (307.488, 5.23e-05), 
    (308.492, 5.374e-05), (309.496, 5.523e-05), (310.499, 5.674e-05), (311.503, 
    5.829e-05), (312.507, 5.988e-05), (313.51, 6.15e-05), (314.514, 6.316e-05), 
    (315.518, 6.486e-05), (316.522, 6.66e-05), (317.525, 6.837e-05), (318.529, 
    7.019e-05), (319.533, 7.205e-05), (320.537, 7.395e-05), (321.541, 
    7.589e-05), (322.545, 7.787e-05), (323.549, 7.99e-05), (324.553, 
    8.197e-05), (325.557, 8.409e-05), (326.561, 8.626e-05), (327.565, 
    8.847e-05), (328.569, 9.073e-05), (329.573, 9.304e-05), (330.577, 
    9.54e-05), (331.582, 9.781e-05), (332.586, 0.00010028), (333.59, 
    0.00010279), (334.594, 0.00010536), (335.599, 0.00010799), (336.603, 
    0.00011067), (337.608, 0.00011341), (338.612, 0.0001162), (339.617, 
    0.00011906), (340.621, 0.00012197), (341.626, 0.00012495), (342.63, 
    0.00012799), (343.635, 0.00013109), (344.64, 0.00013425), (345.644, 
    0.00013748), (346.649, 0.00014078), (347.654, 0.00014415), (348.659, 
    0.00014758), (349.664, 0.00015109), (350.668, 0.00015466), (351.673, 
    0.00015831), (352.678, 0.00016203), (353.683, 0.00016583), (354.689, 
    0.0001697), (355.694, 0.00017366), (356.699, 0.00017769), (357.704, 
    0.0001818), (358.709, 0.00018599), (359.715, 0.00019027), (360.72, 
    0.00019463), (361.726, 0.00019907), (362.731, 0.00020361), (363.737, 
    0.00020823), (364.742, 0.00021295), (365.748, 0.00021775), (366.753, 
    0.00022265), (367.759, 0.00022764), (368.765, 0.00023273), (369.771, 
    0.00023792), (370.777, 0.00024321), (371.783, 0.0002486), (372.789, 
    0.00025409), (373.795, 0.00025969), (374.801, 0.00026539), (375.807, 
    0.00027121), (376.813, 0.00027713), (377.82, 0.00028316), (378.826, 
    0.00028931), (379.833, 0.00029557), (380.839, 0.00030195), (381.846, 
    0.00030845), (382.853, 0.00031507), (383.859, 0.00032181), (384.866, 
    0.00032867), (385.873, 0.00033567), (386.88, 0.00034279), (387.887, 
    0.00035004), (388.894, 0.00035743), (389.901, 0.00036494), (390.909, 
    0.0003726), (391.916, 0.0003804), (392.923, 0.00038833), (393.931, 
    0.00039641), (394.939, 0.00040464), (395.946, 0.00041301), (396.954, 
    0.00042153), (397.962, 0.00043021), (398.97, 0.00043904), (399.978, 
    0.00044803), (400.986, 0.00045717), (401.994, 0.00046648), (403.003, 
    0.00047595), (404.011, 0.00048559), (405.02, 0.0004954), (406.028, 
    0.00050538), (407.037, 0.00051553), (408.046, 0.00052586), (409.055, 
    0.00053637), (410.064, 0.00054706), (411.073, 0.00055794), (412.082, 
    0.00056901), (413.091, 0.00058026), (414.101, 0.00059171), (415.111, 
    0.00060335), (416.12, 0.00061519), (417.13, 0.00062724), (418.14, 
    0.00063949), (419.15, 0.00065194), (420.16, 0.00066461), (421.171, 
    0.00067749), (422.181, 0.00069058), (423.192, 0.0007039), (424.202, 
    0.00071744), (425.213, 0.0007312), (426.224, 0.0007452), (427.235, 
    0.00075943), (428.247, 0.00077389), (429.258, 0.00078859), (430.27, 
    0.00080353), (431.281, 0.00081872), (432.293, 0.00083416), (433.305, 
    0.00084986), (434.317, 0.0008658), (435.329, 0.00088201), (436.342, 
    0.00089848), (437.355, 0.00091522), (438.367, 0.00093223), (439.38, 
    0.00094952), (440.393, 0.00096708), (441.407, 0.00098493), (442.42, 
    0.00100306), (443.434, 0.00102148), (444.448, 0.0010402), (445.462, 
    0.00105921), (446.476, 0.00107852), (447.49, 0.00109815), (448.505, 
    0.00111808), (449.519, 0.00113832), (450.534, 0.00115889), (451.55, 
    0.00117978), (452.565, 0.00120099), (453.58, 0.00122254), (454.596, 
    0.00124442), (455.612, 0.00126664), (456.628, 0.00128921), (457.645, 
    0.00131213), (458.661, 0.0013354), (459.678, 0.00135903), (460.695, 
    0.00138302), (461.713, 0.00140739), (462.73, 0.00143212), (463.748, 
    0.00145724), (464.766, 0.00148273), (465.784, 0.00150862), (466.803, 
    0.00153489), (467.821, 0.00156157), (468.84, 0.00158865), (469.86, 
    0.00161613), (470.879, 0.00164403), (471.899, 0.00167235), (472.919, 
    0.0017011), (473.939, 0.00173027), (474.96, 0.00175988), (475.981, 
    0.00178993), (477.002, 0.00182042), (478.023, 0.00185137), (479.045, 
    0.00188277), (480.067, 0.00191464), (481.089, 0.00194698), (482.112, 
    0.00197979), (483.135, 0.00201288), (484.158, 0.00204621), (485.181, 
    0.00208002), (486.205, 0.00211454), (487.229, 0.00215), (488.254, 
    0.00218663), (489.28, 0.00222465), (490.307, 0.0022643), (491.334, 
    0.0023058), (492.363, 0.00234937), (493.393, 0.00239525), (494.425, 
    0.00244365), (495.457, 0.0024948), (496.492, 0.00254893), (497.528, 
    0.00260624), (498.566, 0.00266698), (499.606, 0.00273135), (500.648, 
    0.00279959), (501.692, 0.0028719), (502.739, 0.00294852), (503.788, 
    0.00302966), (504.839, 0.00311554), (505.893, 0.00320639), (506.951, 
    0.00330241), (508.011, 0.00340383), (509.074, 0.00351087), (510.14, 
    0.00362375), (511.21, 0.00374268), (512.283, 0.00386787), (513.36, 
    0.00399956), (514.44, 0.00413794), (515.525, 0.00428324), (516.613, 
    0.00443568), (517.706, 0.00459546), (518.803, 0.0047628), (519.904, 
    0.00493792), (521.01, 0.00512103), (522.12, 0.00531234), (523.236, 
    0.00551206), (524.356, 0.00572041), (525.482, 0.0059376), (526.612, 
    0.00616384), (527.748, 0.00639933), (528.89, 0.00664429), (530.037, 
    0.00689893), (531.19, 0.00716345), (532.35, 0.00743807), (533.515, 
    0.00772299), (534.686, 0.00801841), (535.864, 0.00832454), (537.049, 
    0.00864159), (538.24, 0.00896976), (539.438, 0.00930926), (540.643, 
    0.00966028), (541.855, 0.01002304), (543.075, 0.01039772), (544.302, 
    0.01078453), (545.537, 0.01118368), (546.779, 0.01159535), (548.029, 
    0.01201974), (549.288, 0.01245706), (550.555, 0.0129075), (551.83, 
    0.01337125), (553.114, 0.01384851), (554.406, 0.01433947), (555.707, 
    0.01484432), (557.018, 0.01536325), (558.337, 0.01589646), (559.666, 
    0.01644412), (561.005, 0.01700643), (562.353, 0.01758357), (563.711, 
    0.01817573), (565.08, 0.01878309), (566.458, 0.01940584), (567.847, 
    0.02004415), (569.246, 0.02069821), (570.656, 0.02136819), (572.077, 
    0.02205427), (573.509, 0.02275663), (574.952, 0.02347544), (576.407, 
    0.02421087), (577.873, 0.02496309), (579.351, 0.02573229), (580.841, 
    0.02651861), (582.343, 0.02732224), (583.857, 0.02814333), (585.384, 
    0.02898205), (586.924, 0.02983856), (588.476, 0.03071302), (590.041, 
    0.03160559), (591.62, 0.03251644), (593.211, 0.0334457), (594.817, 
    0.03439354), (596.436, 0.03536011), (598.069, 0.03634556), (599.716, 
    0.03735003), (601.377, 0.03837368), (603.053, 0.03941664), (604.744, 
    0.04047906), (606.449, 0.04156109), (608.17, 0.04266285), (609.906, 
    0.04378449), (611.657, 0.04492614), (613.424, 0.04608793), (615.206, 
    0.04726999), (617.005, 0.04847245), (618.82, 0.04969545), (620.651, 
    0.05093909), (622.499, 0.05220351), (624.364, 0.05348882), (626.245, 
    0.05479515), (628.144, 0.0561226), (630.061, 0.05747129), (631.994, 
    0.05884133), (633.946, 0.06023284), (635.916, 0.0616459), (637.904, 
    0.06308064), (639.91, 0.06453716), (641.935, 0.06601554), (643.979, 
    0.06751589), (646.041, 0.06903831), (648.123, 0.07058288), (650.225, 
    0.07214969), (652.346, 0.07373884), (654.487, 0.07535041), (656.648, 
    0.07698447), (658.829, 0.07864112), (661.031, 0.08032042), (663.253, 
    0.08202246), (665.497, 0.0837473), (667.761, 0.08549502), (670.047, 
    0.08726568), (672.355, 0.08905934), (674.684, 0.09087608), (677.035, 
    0.09271594), (679.409, 0.09457899), (681.805, 0.09646528), (684.223, 
    0.09837487), (686.665, 0.10030779), (689.13, 0.10226411), (691.617, 
    0.10424385), (694.129, 0.10624708), (696.664, 0.10827381), (699.224, 
    0.1103241), (701.807, 0.11239796), (704.415, 0.11449545), (707.048, 
    0.11661657), (709.705, 0.11876136), (712.388, 0.12092985), (715.096, 
    0.12312204), (717.83, 0.12533797), (720.59, 0.12757764), (723.375, 
    0.12984107), (726.187, 0.13212826), (729.026, 0.13443923), (731.891, 
    0.13677398), (734.784, 0.13913251), (737.703, 0.14151482), (740.65, 
    0.14392092), (743.625, 0.14635078), (746.628, 0.14880441), (749.659, 
    0.15128179), (752.718, 0.15378291), (755.807, 0.15630776), (758.924, 
    0.15885631), (762.07, 0.16142855), (765.246, 0.16402445), (768.451, 
    0.16664398), (771.686, 0.16928712), (774.952, 0.17195384), (778.248, 
    0.1746441), (781.574, 0.17735787), (784.932, 0.18009511), (788.32, 
    0.18285578), (791.741, 0.18563983), (795.192, 0.18844722), (798.676, 
    0.19127791), (802.192, 0.19413184), (805.74, 0.19700895), (809.321, 
    0.19990921), (812.935, 0.20283254), (816.582, 0.20577889), (820.263, 
    0.2087482), (823.977, 0.2117404), (827.725, 0.21475543), (831.508, 
    0.21779322), (835.325, 0.2208537), (839.176, 0.2239368), (843.063, 
    0.22704244), (846.985, 0.23017055), (850.943, 0.23332105), (854.936, 
    0.23649386), (858.966, 0.23968889), (863.032, 0.24290607), (867.134, 
    0.2461453), (871.274, 0.2494065), (875.45, 0.25268957), (879.664, 
    0.25599443), (883.916, 0.25932098), (888.205, 0.26266912)))

#5 CREATE 3 SECTIONS

mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='Carbon steel', name='Endplate', 
    numIntPts=5, poissonDefinition=DEFAULT, preIntegrate=OFF, temperature=
    GRADIENT, thickness=20.0, thicknessField='', thicknessModulus=None, 
    thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material=materialType, name='Flange', 
    numIntPts=5, poissonDefinition=DEFAULT, preIntegrate=OFF, temperature=
    GRADIENT, thickness=tf, thicknessField='', thicknessModulus=None, 
    thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material=materialType, name='Web', 
    numIntPts=5, poissonDefinition=DEFAULT, preIntegrate=OFF, temperature=
    GRADIENT, thickness=tw, thicknessField='', thicknessModulus=None, 
    thicknessType=UNIFORM, useDensity=OFF)

#6 PARTITION WEB

mdb.models['Model-1'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)], 
    ))
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=36.96, name='__profile__', 
    sheetSize=1478.7, transform=
    mdb.models['Model-1'].rootAssembly.MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].faces.findAt(
    (0.0, (height/3.0), (length/2.0)), (-1.0, 0.0, 0.0)), sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].edges.findAt(
    (0.0, ((height-tf)/3.0), 0.0), ), sketchOrientation=RIGHT, origin=(0.0, 0.0, (length/2.0))))
    #(0.0, ((height-tf)/2.0), 0.0), ), sketchOrientation=RIGHT, origin=(0.0, 0.0, (length/2.0))))
    

mdb.models['Model-1'].rootAssembly.projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-(length/2.0), 0.0), 
    point2=((length/2.0), 0.0))

mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, ((height-tf)/2.0)), point2=
    (0.0, -((height-tf)/2.0)))


for i in range (len(weblines)):
    mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-(length/2.0), weblines[i]), 
    point2=((length/2.0), weblines[i]))

for i in range (len(weblines)):
    mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-(length/2.0), -weblines[i]), 
    point2=((length/2.0), -weblines[i]))

mdb.models['Model-1'].rootAssembly.PartitionFaceBySketch(faces=
    mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].faces.findAt(
    ((0.0, ((height-tf)/2.0), (length/2.0)), )), sketch=
    mdb.models['Model-1'].sketches['__profile__'], sketchUpEdge=
    mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].edges.findAt(
    (0.0, ((height-tf)/3.0), 0.0), ))

del mdb.models['Model-1'].sketches['__profile__']


#6 PARTITION TOPFLANGE

mdb.models['Model-1'].ConstrainedSketch(gridSpacing=37.05, name='__profile__', 
    sheetSize=1482.08, transform=
    mdb.models['Model-1'].rootAssembly.MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].faces.findAt(
    (-16.666667, ((height-tf)/2.0), (length/2.0)), (0.0, -1.0, 0.0)), sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].edges.findAt(
    (12.5, ((height-tf)/2.0), 0.0), ), sketchOrientation=RIGHT, origin=(0, ((height-tf)/2.0), 
    (length/2.0))))

mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, -(width/2.0)), point2=
    (0.0, (width/2.0)))

mdb.models['Model-1'].sketches['__profile__'].Line(point1=((length/4.0), -(width/2.0)), point2=
    ((length/4.0), (width/2.0)))

mdb.models['Model-1'].sketches['__profile__'].Line(point1=((-length/4.0), -(width/2.0)), point2=
    ((-length/4.0), (width/2.0)))

for i in range (len(flangelines)):
    mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-(length/2.0), flangelines[i]), 
    point2=((length/2.0), flangelines[i]))

for i in range (len(flangelines)):
    mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-(length/2.0), -flangelines[i]), 
    point2=((length/2.0), -flangelines[i]))

mdb.models['Model-1'].rootAssembly.PartitionFaceBySketch(faces=
    mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].faces.findAt(
    ((-16.666667, ((height-tf)/2.0), (length/2.0)), ), ((16.666667, ((height-tf)/2.0), (length/2.0)), ), ), 
    sketch=mdb.models['Model-1'].sketches['__profile__'], sketchUpEdge=
    mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].edges.findAt(
    (12.5, ((height-tf)/2.0), 0.0), ))
del mdb.models['Model-1'].sketches['__profile__']

# 6 DRAWING BOTTOM FLANGE PARTITIONS

mdb.models['Model-1'].ConstrainedSketch(gridSpacing=37.05, name='__profile__', 
    sheetSize=1482.08, transform=
    mdb.models['Model-1'].rootAssembly.MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].faces.findAt(
    (-16.666667, -((height-tf)/2.0), (length/2.0)), (0.0, -1.0, 0.0)), sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].edges.findAt(
    (12.5, -((height-tf)/2.0), 0.0), ), sketchOrientation=RIGHT, origin=(0, -((height-tf)/2.0), 
    (length/2.0))))
mdb.models['Model-1'].rootAssembly.projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])

mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, -(width/2.0)), point2=
    (0.0, (width/2.0)))

mdb.models['Model-1'].sketches['__profile__'].Line(point1=((length/4.0), -(width/2.0)), point2=
    ((length/4.0), (width/2.0)))

mdb.models['Model-1'].sketches['__profile__'].Line(point1=((-length/4.0), -(width/2.0)), point2=
    ((-length/4.0), (width/2.0)))

for i in range (len(flangelines)):
    mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-(length/2.0), flangelines[i]), 
    point2=((length/2.0), flangelines[i]))

for i in range (len(flangelines)):
    mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-(length/2.0), -flangelines[i]), 
    point2=((length/2.0), -flangelines[i]))

mdb.models['Model-1'].rootAssembly.PartitionFaceBySketch(faces=
    mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].faces.findAt(
    ((-16.666667, -((height-tf)/2.0), (length/2.0)), ), ((16.666667, -((height-tf)/2.0), (length/2.0)), ), 
    ), sketch=mdb.models['Model-1'].sketches['__profile__'], sketchUpEdge=
    mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].edges.findAt(
    (12.5, -((height-tf)/2.0), 0.0), ))
del mdb.models['Model-1'].sketches['__profile__']


# 7 ASSIGN SECTIONS

mdb.models['Model-1'].parts['{} w endplates'.format(modelName)].Set(faces=
    mdb.models['Model-1'].parts['{} w endplates'.format(modelName)].faces.findAt(
    ((-33.333333, -39.666667, length), ), ((-50.0, -50.0, 0.0), ), ), name=
    'AssignSectionEndplates')

mdb.models['Model-1'].parts['{} w endplates'.format(modelName)].SectionAssignment(
    offset=0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['{} w endplates'.format(modelName)].sets['AssignSectionEndplates']
    , sectionName='Endplate', thicknessAssignment=FROM_SECTION)

mdb.models['Model-1'].parts['{} w endplates'.format(modelName)].Set(faces=
    mdb.models['Model-1'].parts['{} w endplates'.format(modelName)].faces.findAt(
    ((0.0, -(5.0*(height-tf)/12.0), (length/2.0)), )), name='AssignSectionWeb')

mdb.models['Model-1'].parts['{} w endplates'.format(modelName)].SectionAssignment(
    offset=0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['{} w endplates'.format(modelName)].sets['AssignSectionWeb']
    , sectionName='Web', thicknessAssignment=FROM_SECTION)

mdb.models['Model-1'].parts['{} w endplates'.format(modelName)].Set(faces=
    mdb.models['Model-1'].parts['{} w endplates'.format(modelName)].faces.findAt(
    ((-(width/6.0), ((height-tf)/2.0), (length/2.0)), ), (((width/6.0), ((height-tf)/2.0), (length/2.0)), ), ((
    -(width/6.0), -((height-tf)/2.0), (length/2.0)), ), (((width/6.0), -((height-tf)/2.0), (length/2.0)), ), ), 
    name='AssignSectionFlanges')

mdb.models['Model-1'].parts['{} w endplates'.format(modelName)].SectionAssignment(
    offset=0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['{} w endplates'.format(modelName)].sets['AssignSectionFlanges']
    , sectionName='Flange', thicknessAssignment=FROM_SECTION)

# 8 ASSIGN GEOMETRY SETS

mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.Set(name='LatDefGeomSet', vertices=
    mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].vertices.findAt(
    ((0.0, ((height-tf)/2.0), (length/2.0)), )))
mdb.models['Model-1'].rootAssembly.Set(name='RfGeomSet', vertices=
    mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].vertices.findAt(
    ((0.0, 0.0, 0.0), )))

# 9 MESHING

mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].edges.findAt(
    ((0.0, -((height-tf)/2), (length/8.0)), ), ((0.0, -((height-tf)/2), (3.0*length/8.0)), ), ((-44.065, -((height-tf)/2), 
    (length/2.)), ), ((32.195, -((height-tf)/2), (length/2.0)), ), ((0.0, ((height-tf)/2), (length/8.0)), ), 
    ((0.0, -((height-tf)/2), (5.0*length/8.0)), ), ((0.0, -((height-tf)/2), (7.0*length/8.0)), ), ((0.0, ((height-tf)/2), (5.0*length/8.0)), ), 
    ((0.0, ((height-tf)/2), (7.0*length/8.0)), ),
    ((0.0, ((height-tf)/2), (3.0*length/8.0)), ), ((-44.065, ((height-tf)/2), (length/2.0)), ), ((32.195, ((height-tf)/2), (length/2.0)), ), )
    , size=edgeSeed)

#mdb.models['Model-1'].rootAssembly.Set(edges=
#    mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].edges.findAt(
#    ((0.0, -((height-tf)/2), (length/4.0)), ), ((0.0, -((height-tf)/2), (3.0*length/4.0)), ), ((-44.065, -((height-tf)/2), 
#    (length/2.)), ), ((32.195, -((height-tf)/2), (length/2.0)), ), ((0.0, ((height-tf)/2), (length/4.0)), ), ((0.0, 
#    ((height-tf)/2), (3.0*length/4.0)), ), ((-44.065, ((height-tf)/2), (length/2.0)), ), ((32.195, ((height-tf)/2), (length/2.0)), ), 
#    , name='EdgeSeeds')

mdb.models['Model-1'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)], 
    ), size=globalSeed)

mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)], 
    ))


#10 CREATE LIN BUCKLE STEP + BOUNDARY CONDITIONS

mdb.models['Model-1'].BuckleStep(maxIterations=100, name=
    'Lin-buckle-static-end', numEigen=eigenmodeNumber[1], previous='Initial', vectors=180)

mdb.models['Model-1'].rootAssembly.Set(name='LinBuckleStaticEnd', vertices=
    mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].vertices.findAt(
    ((0.0, 0.0, length), )))

mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'Lin-buckle-static-end', region=
    mdb.models['Model-1'].rootAssembly.sets['LinBuckleStaticEnd'], u1=SET, u2=
    SET, u3=SET, ur1=UNSET, ur2=SET, ur3=SET)

mdb.models['Model-1'].boundaryConditions['Lin-buckle-static-end'].setValuesInStep(
    buckleCase=PERTURBATION_AND_BUCKLING, stepName='Lin-buckle-static-end')

mdb.models['Model-1'].rootAssembly.Set(name='LinBuckleMovingEnd', vertices=
    mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].vertices.findAt(
    ((0.0, 0.0, 0.0), )))

mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='Lin-buckle-static-end', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'Lin-buckle-moving-end', region=
    mdb.models['Model-1'].rootAssembly.sets['LinBuckleMovingEnd'], u1=0.0, u2=
    0.0, u3=UNSET, ur1=UNSET, ur2=0.0, ur3=0.0)

mdb.models['Model-1'].rootAssembly.Set(name='Cforce', vertices=
    mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].vertices.findAt(
    ((0.0, 0.0, 0.0), )))

mdb.models['Model-1'].ConcentratedForce(cf3=1.0, createStepName=
    'Lin-buckle-static-end', distributionType=UNIFORM, field='', localCsys=None
    , name='Cforce', region=mdb.models['Model-1'].rootAssembly.sets['Cforce'])

mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, buckleCase=
    PERTURBATION_AND_BUCKLING, createStepName='Lin-buckle-static-end', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'lin-str-axis-BC', region=Region(
    vertices=mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].vertices.findAt(
    (((width/2.0), -((height-tf)/2.0), (length/4.0)), ), (((width/2.0), -((height-tf)/2.0), (length/2.0)), ), (((width/2.0), -((height-tf)/2.0), 
    (3.0*length/4.0)), ), (((width/2.0), ((height-tf)/2.0), (length/4.0)), ), (((width/2.0), ((height-tf)/2.0), (length/2.0)), ), (((width/2.0), 
    ((height-tf)/2.0), (3.0*length/4.0)), ), )), u1=0.0, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, 
    ur3=UNSET)

# 11 EDIT KEYWORDS

mdb.models['Model-1'].keywordBlock.synchVersions(storeNodesAndElements=False)

#print len(mdb.models['Model-1'].keywordBlock.sieBlocks)

#index = 0
#for keyBlockString in mdb.models['Model-1'].keywordBlock.sieBlocks :
#    print 'index {} : {}'.format(index,keyBlockString)
#    index = index + 1


sieBlocksPosition = len(mdb.models['Model-1'].keywordBlock.sieBlocks) - 2
mdb.models['Model-1'].keywordBlock.insert(sieBlocksPosition, '\n*NODE FILE\nU')


#print mdb.models['Model-1'].keywordBlock.sieBlocks

# 12 CREATE JOB

mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=THREADS, name='{}-Job-1-eigenmode'.format(jobNumber), 
    nodalOutputPrecision=FULL, numCpus=12, numDomains=12, numGPUs=5, queue=None
    , resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', 
    waitHours=0, waitMinutes=0)



# 12.2 SUBMIT

linearAnalyseJobName = '{}-Job-1-eigenmode'.format(jobNumber)
mdb.jobs[linearAnalyseJobName].submit(consistencyChecking=OFF)

mdb.jobs[linearAnalyseJobName].waitForCompletion()


if 1<2:

    # 13 CHANGE SECTION ASSIGNMENT

    mdb.models['Model-1'].sections['Flange'].setValues(idealization=NO_IDEALIZATION
        , integrationRule=SIMPSON, material=materialTypeRO, numIntPts=5, preIntegrate=
        OFF, thickness=tf, thicknessField='', thicknessType=UNIFORM)
    mdb.models['Model-1'].sections['Web'].setValues(idealization=NO_IDEALIZATION, 
        integrationRule=SIMPSON, material=materialTypeRO, numIntPts=5, preIntegrate=
        OFF, thickness=tw, thicknessField='', thicknessType=UNIFORM)

    # 14 DISABLE LIN BUCKLE AND CREATE NL BUCKLE

    mdb.models['Model-1'].steps['Lin-buckle-static-end'].suppress()
    mdb.models['Model-1'].StaticRiksStep(initialArcInc=0.01, maxArcInc=0.01, 
        minArcInc=1e-35, name='NL-buckle', nlgeom=ON, previous='Initial')



    # 15 HISTORY OUTPUT, FIELD OUTPUT, BCs

    mdb.models['Model-1'].fieldOutputRequests['F-Output-2'].setValues(variables=(
        'LE', 'PE', 'PEEQ', 'PEMAG', 'RF', 'CF', 'S', 'MISESMAX', 'U', 'COORD'))

    del mdb.models['Model-1'].historyOutputRequests['H-Output-1']

    mdb.models['Model-1'].HistoryOutputRequest(createStepName='NL-buckle', name=
        'RF', rebar=EXCLUDE, region=
        mdb.models['Model-1'].rootAssembly.sets['RfGeomSet'], sectionPoints=DEFAULT
        , variables=('RF3', ))

    mdb.models['Model-1'].HistoryOutputRequest(createStepName='NL-buckle', name=
        'Axial displacement', rebar=EXCLUDE, region=
        mdb.models['Model-1'].rootAssembly.sets['RfGeomSet'], sectionPoints=DEFAULT
        , variables=('U3', ))

    mdb.models['Model-1'].HistoryOutputRequest(createStepName='NL-buckle', name=
        'Lateral displacement', rebar=EXCLUDE, region=
        mdb.models['Model-1'].rootAssembly.sets['LatDefGeomSet'], sectionPoints=
        DEFAULT, variables=('U2', ))

    mdb.models['Model-1'].boundaryConditions['Lin-buckle-static-end'].suppress()

    mdb.models['Model-1'].rootAssembly.Set(name='NLStaticEnd', vertices=
        mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].vertices.findAt(
        ((0.0, 0.0, length), )))

    mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName=
        'NL-buckle', distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=
        None, name='NL-static-end', region=
        mdb.models['Model-1'].rootAssembly.sets['NLStaticEnd'], u1=0.0, u2=0.0, u3=
        0.0, ur1=UNSET, ur2=0, ur3=0.0)

    mdb.models['Model-1'].rootAssembly.Set(name='NLMovingEnd', vertices=
        mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].vertices.findAt(
        ((0.0, 0.0, 0.0), )))

    mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName=
        'NL-buckle', distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=
        None, name='NL-moving-end', region=
        mdb.models['Model-1'].rootAssembly.sets['NLMovingEnd'], u1=0.0, u2=0.0, u3=
        (forcedDisplacement), ur1=UNSET, ur2=0, ur3=0.0)

    mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName=
        'NL-buckle', distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=
        None, name='NL-str-axis-BC', region=Region(
        vertices=mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].vertices.findAt(
        (((width/2.0), -((height-tf)/2.0), (length/4.0)), ), (((width/2.0), -((height-tf)/2.0), (length/2.0)), ), (((width/2.0), -((height-tf)/2.0), 
        (3.0*length/4.0)), ), (((width/2.0), ((height-tf)/2.0), (length/4.0)), ), (((width/2.0), ((height-tf)/2.0), (length/2.0)), ), (((width/2.0), 
        ((height-tf)/2.0), (3.0*length/4.0)), ), )), u1=0.0, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, 
        ur3=UNSET)



    # 16 ASSIGN RESIDUAL STRESSES WEB

    for i in range(len(residualStressWebInput)):
        mdb.models['Model-1'].Stress(distributionType=UNIFORM, name='Web{}'.format(str(i)), region=
            Region(
            faces=mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].faces.findAt(
            ((0.0, -residualStressWeb[i], (length/4.0)), (-1.0, 0.0, 0.0)), ((0.0, -residualStressWeb[i], 
            (3.0*length/4.0)), (-1.0, 0.0, 0.0)), ((0.0, residualStressWeb[i], (length/4.0)), (-1.0, 0.0, 
            0.0)), ((0.0, residualStressWeb[i], (3.0*length/4.0)), (-1.0, 0.0, 0.0)), )), sigma11=residualStressWebInput[i]
            , sigma12=0.0, sigma13=None, sigma22=0.0, sigma23=None, sigma33=None)


    # 16.1 ASSIGN RESIDUAL STRESSES FLANGE

    for i in range(len(residualStressFlangeInput)):
        mdb.models['Model-1'].Stress(distributionType=UNIFORM, name='Flange{}'.format(str(i)), region=
            Region(
            faces=mdb.models['Model-1'].rootAssembly.instances['{} w endplates-1'.format(modelName)].faces.findAt(
            ((-residualStressFlange[i], -((height-tf)/2.0), (length/8.0)), (0.0, -1.0, 0.0)), ((-residualStressFlange[i], -((height-tf)/2.0), 
            (3.0*length/8.0)), (0.0, -1.0, 0.0)), ((-residualStressFlange[i], -((height-tf)/2.0), (7.0*length/8.0)), (0.0, 
            -1.0, 0.0)), ((-residualStressFlange[i], -((height-tf)/2.0), (5.0*length/8.0)), (0.0, -1.0, 0.0)), ((
            residualStressFlange[i], -((height-tf)/2.0), (length/8.0)), (0.0, -1.0, 0.0)), ((residualStressFlange[i], -((height-tf)/2.0), 
            (3.0*length/8.0)), (0.0, -1.0, 0.0)), ((residualStressFlange[i], -((height-tf)/2.0), (7.0*length/8.0)), (0.0, -1.0, 
            0.0)), ((residualStressFlange[i], -((height-tf)/2.0), (5.0*length/8.0)), (0.0, -1.0, 0.0)), ((-residualStressFlange[i], 
            ((height-tf)/2.0), (length/8.0)), (0.0, -1.0, 0.0)), ((-residualStressFlange[i], ((height-tf)/2.0), (3.0*length/8.0)), (0.0, 
            -1.0, 0.0)), ((-residualStressFlange[i], ((height-tf)/2.0), (7.0*length/8.0)), (0.0, -1.0, 0.0)), ((
            -residualStressFlange[i], ((height-tf)/2.0), (5.0*length/8.0)), (0.0, -1.0, 0.0)), ((residualStressFlange[i], ((height-tf)/2.0), 
            (length/8.0)), (0.0, -1.0, 0.0)), ((residualStressFlange[i], ((height-tf)/2.0), (3.0*length/8.0)), (0.0, -1.0, 
            0.0)), ((residualStressFlange[i], ((height-tf)/2.0), (7.0*length/8.0)), (0.0, -1.0, 0.0)), ((residualStressFlange[i], ((height-tf)/2.0), 
            (5.0*length/8.0)), (0.0, -1.0, 0.0)), )), sigma11=0.0, sigma12=0.0, sigma13=None, 
            sigma22=residualStressFlangeInput[i], sigma23=None, sigma33=None)

    # 17 EDIT KEYWORDS

    mdb.models['Model-1'].keywordBlock.synchVersions(storeNodesAndElements=False)


    

    indexNLBuckle = 0
    for keyBlockString in mdb.models['Model-1'].keywordBlock.sieBlocks :
        if (keyBlockString.find('** STEP: NL-buckle') != -1):
            break
        indexNLBuckle = indexNLBuckle + 1

#    print 'I found the index of NLBuckle: it is: {}'.format(index)



    deleteNodeFileKeywordString = '\n' \
    '** ----------------------------------------------------------------\n' \
    '*IMPERFECTION,FILE={}-Job-1-eigenmode,STEP=1\n' \
    '{},{}\n' \
    '{},{}\n' \
    '** \n' \
    '** STEP: NL-buckle\n' \
    '**'.format(
        str(jobNumber),
        str(eigenmodeNumber[0]), str(round(imperfectionAmplitude[0],3)),
        str(eigenmodeNumber[1]), str(round(imperfectionAmplitude[1],3)),
        )


    mdb.models['Model-1'].keywordBlock.replace(indexNLBuckle,deleteNodeFileKeywordString) 

#    mdb.models['Model-1'].keywordBlock.replace(111, '\n')



    # 18 CREATE JOB

    mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
        explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
        memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
        multiprocessingMode=THREADS, name='{}-Job-2'.format(jobNumber), nodalOutputPrecision=FULL, 
        numCpus=12, numDomains=12, numGPUs=5, queue=None, resultsFormat=ODB, 
        scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)

    if 1>0:
        # 19 SUBMIT JOB
        nonLinearAnalyseJobName = '{}-Job-2'.format(jobNumber)
        mdb.jobs[nonLinearAnalyseJobName].submit(consistencyChecking=OFF)
        print 'Submitted non lineair job {}, waiting for completion.'.format(nonLinearAnalyseJobName)
        mdb.jobs[nonLinearAnalyseJobName].waitForCompletion()
        print 'Non lineair job {} completed.'.format(nonLinearAnalyseJobName)
